// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QemuVMDisk struct {
	Aio             *string `pulumi:"aio"`
	Backup          *int    `pulumi:"backup"`
	Cache           *string `pulumi:"cache"`
	Discard         *string `pulumi:"discard"`
	File            *string `pulumi:"file"`
	Format          *string `pulumi:"format"`
	Iops            *int    `pulumi:"iops"`
	IopsMax         *int    `pulumi:"iopsMax"`
	IopsMaxLength   *int    `pulumi:"iopsMaxLength"`
	IopsRd          *int    `pulumi:"iopsRd"`
	IopsRdMax       *int    `pulumi:"iopsRdMax"`
	IopsRdMaxLength *int    `pulumi:"iopsRdMaxLength"`
	IopsWr          *int    `pulumi:"iopsWr"`
	IopsWrMax       *int    `pulumi:"iopsWrMax"`
	IopsWrMaxLength *int    `pulumi:"iopsWrMaxLength"`
	Iothread        *int    `pulumi:"iothread"`
	Mbps            *int    `pulumi:"mbps"`
	MbpsRd          *int    `pulumi:"mbpsRd"`
	MbpsRdMax       *int    `pulumi:"mbpsRdMax"`
	MbpsWr          *int    `pulumi:"mbpsWr"`
	MbpsWrMax       *int    `pulumi:"mbpsWrMax"`
	Media           *string `pulumi:"media"`
	Replicate       *int    `pulumi:"replicate"`
	Size            string  `pulumi:"size"`
	Slot            *int    `pulumi:"slot"`
	Ssd             *int    `pulumi:"ssd"`
	Storage         string  `pulumi:"storage"`
	StorageType     *string `pulumi:"storageType"`
	Type            string  `pulumi:"type"`
	Volume          *string `pulumi:"volume"`
}

// QemuVMDiskInput is an input type that accepts QemuVMDiskArgs and QemuVMDiskOutput values.
// You can construct a concrete instance of `QemuVMDiskInput` via:
//
//	QemuVMDiskArgs{...}
type QemuVMDiskInput interface {
	pulumi.Input

	ToQemuVMDiskOutput() QemuVMDiskOutput
	ToQemuVMDiskOutputWithContext(context.Context) QemuVMDiskOutput
}

type QemuVMDiskArgs struct {
	Aio             pulumi.StringPtrInput `pulumi:"aio"`
	Backup          pulumi.IntPtrInput    `pulumi:"backup"`
	Cache           pulumi.StringPtrInput `pulumi:"cache"`
	Discard         pulumi.StringPtrInput `pulumi:"discard"`
	File            pulumi.StringPtrInput `pulumi:"file"`
	Format          pulumi.StringPtrInput `pulumi:"format"`
	Iops            pulumi.IntPtrInput    `pulumi:"iops"`
	IopsMax         pulumi.IntPtrInput    `pulumi:"iopsMax"`
	IopsMaxLength   pulumi.IntPtrInput    `pulumi:"iopsMaxLength"`
	IopsRd          pulumi.IntPtrInput    `pulumi:"iopsRd"`
	IopsRdMax       pulumi.IntPtrInput    `pulumi:"iopsRdMax"`
	IopsRdMaxLength pulumi.IntPtrInput    `pulumi:"iopsRdMaxLength"`
	IopsWr          pulumi.IntPtrInput    `pulumi:"iopsWr"`
	IopsWrMax       pulumi.IntPtrInput    `pulumi:"iopsWrMax"`
	IopsWrMaxLength pulumi.IntPtrInput    `pulumi:"iopsWrMaxLength"`
	Iothread        pulumi.IntPtrInput    `pulumi:"iothread"`
	Mbps            pulumi.IntPtrInput    `pulumi:"mbps"`
	MbpsRd          pulumi.IntPtrInput    `pulumi:"mbpsRd"`
	MbpsRdMax       pulumi.IntPtrInput    `pulumi:"mbpsRdMax"`
	MbpsWr          pulumi.IntPtrInput    `pulumi:"mbpsWr"`
	MbpsWrMax       pulumi.IntPtrInput    `pulumi:"mbpsWrMax"`
	Media           pulumi.StringPtrInput `pulumi:"media"`
	Replicate       pulumi.IntPtrInput    `pulumi:"replicate"`
	Size            pulumi.StringInput    `pulumi:"size"`
	Slot            pulumi.IntPtrInput    `pulumi:"slot"`
	Ssd             pulumi.IntPtrInput    `pulumi:"ssd"`
	Storage         pulumi.StringInput    `pulumi:"storage"`
	StorageType     pulumi.StringPtrInput `pulumi:"storageType"`
	Type            pulumi.StringInput    `pulumi:"type"`
	Volume          pulumi.StringPtrInput `pulumi:"volume"`
}

func (QemuVMDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMDisk)(nil)).Elem()
}

func (i QemuVMDiskArgs) ToQemuVMDiskOutput() QemuVMDiskOutput {
	return i.ToQemuVMDiskOutputWithContext(context.Background())
}

func (i QemuVMDiskArgs) ToQemuVMDiskOutputWithContext(ctx context.Context) QemuVMDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMDiskOutput)
}

// QemuVMDiskArrayInput is an input type that accepts QemuVMDiskArray and QemuVMDiskArrayOutput values.
// You can construct a concrete instance of `QemuVMDiskArrayInput` via:
//
//	QemuVMDiskArray{ QemuVMDiskArgs{...} }
type QemuVMDiskArrayInput interface {
	pulumi.Input

	ToQemuVMDiskArrayOutput() QemuVMDiskArrayOutput
	ToQemuVMDiskArrayOutputWithContext(context.Context) QemuVMDiskArrayOutput
}

type QemuVMDiskArray []QemuVMDiskInput

func (QemuVMDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMDisk)(nil)).Elem()
}

func (i QemuVMDiskArray) ToQemuVMDiskArrayOutput() QemuVMDiskArrayOutput {
	return i.ToQemuVMDiskArrayOutputWithContext(context.Background())
}

func (i QemuVMDiskArray) ToQemuVMDiskArrayOutputWithContext(ctx context.Context) QemuVMDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMDiskArrayOutput)
}

type QemuVMDiskOutput struct{ *pulumi.OutputState }

func (QemuVMDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMDisk)(nil)).Elem()
}

func (o QemuVMDiskOutput) ToQemuVMDiskOutput() QemuVMDiskOutput {
	return o
}

func (o QemuVMDiskOutput) ToQemuVMDiskOutputWithContext(ctx context.Context) QemuVMDiskOutput {
	return o
}

func (o QemuVMDiskOutput) Aio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Aio }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Backup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Backup }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Cache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Cache }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Discard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Discard }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.File }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsMax }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsMaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsMaxLength }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsRd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsRd }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsRdMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsRdMax }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsRdMaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsRdMaxLength }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsWr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsWr }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsWrMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsWrMax }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) IopsWrMaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.IopsWrMaxLength }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Iothread() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Iothread }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Mbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Mbps }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsRd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsRd }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsRdMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsRdMax }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsWr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsWr }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsWrMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsWrMax }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Media() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Media }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Replicate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Replicate }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMDisk) string { return v.Size }).(pulumi.StringOutput)
}

func (o QemuVMDiskOutput) Slot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Slot }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Ssd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Ssd }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMDisk) string { return v.Storage }).(pulumi.StringOutput)
}

func (o QemuVMDiskOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMDisk) string { return v.Type }).(pulumi.StringOutput)
}

func (o QemuVMDiskOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type QemuVMDiskArrayOutput struct{ *pulumi.OutputState }

func (QemuVMDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMDisk)(nil)).Elem()
}

func (o QemuVMDiskArrayOutput) ToQemuVMDiskArrayOutput() QemuVMDiskArrayOutput {
	return o
}

func (o QemuVMDiskArrayOutput) ToQemuVMDiskArrayOutputWithContext(ctx context.Context) QemuVMDiskArrayOutput {
	return o
}

func (o QemuVMDiskArrayOutput) Index(i pulumi.IntInput) QemuVMDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMDisk {
		return vs[0].([]QemuVMDisk)[vs[1].(int)]
	}).(QemuVMDiskOutput)
}

type QemuVMHostpci struct {
	Host   *string `pulumi:"host"`
	Pcie   *int    `pulumi:"pcie"`
	Rombar *int    `pulumi:"rombar"`
}

// QemuVMHostpciInput is an input type that accepts QemuVMHostpciArgs and QemuVMHostpciOutput values.
// You can construct a concrete instance of `QemuVMHostpciInput` via:
//
//	QemuVMHostpciArgs{...}
type QemuVMHostpciInput interface {
	pulumi.Input

	ToQemuVMHostpciOutput() QemuVMHostpciOutput
	ToQemuVMHostpciOutputWithContext(context.Context) QemuVMHostpciOutput
}

type QemuVMHostpciArgs struct {
	Host   pulumi.StringPtrInput `pulumi:"host"`
	Pcie   pulumi.IntPtrInput    `pulumi:"pcie"`
	Rombar pulumi.IntPtrInput    `pulumi:"rombar"`
}

func (QemuVMHostpciArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMHostpci)(nil)).Elem()
}

func (i QemuVMHostpciArgs) ToQemuVMHostpciOutput() QemuVMHostpciOutput {
	return i.ToQemuVMHostpciOutputWithContext(context.Background())
}

func (i QemuVMHostpciArgs) ToQemuVMHostpciOutputWithContext(ctx context.Context) QemuVMHostpciOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMHostpciOutput)
}

// QemuVMHostpciArrayInput is an input type that accepts QemuVMHostpciArray and QemuVMHostpciArrayOutput values.
// You can construct a concrete instance of `QemuVMHostpciArrayInput` via:
//
//	QemuVMHostpciArray{ QemuVMHostpciArgs{...} }
type QemuVMHostpciArrayInput interface {
	pulumi.Input

	ToQemuVMHostpciArrayOutput() QemuVMHostpciArrayOutput
	ToQemuVMHostpciArrayOutputWithContext(context.Context) QemuVMHostpciArrayOutput
}

type QemuVMHostpciArray []QemuVMHostpciInput

func (QemuVMHostpciArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMHostpci)(nil)).Elem()
}

func (i QemuVMHostpciArray) ToQemuVMHostpciArrayOutput() QemuVMHostpciArrayOutput {
	return i.ToQemuVMHostpciArrayOutputWithContext(context.Background())
}

func (i QemuVMHostpciArray) ToQemuVMHostpciArrayOutputWithContext(ctx context.Context) QemuVMHostpciArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMHostpciArrayOutput)
}

type QemuVMHostpciOutput struct{ *pulumi.OutputState }

func (QemuVMHostpciOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMHostpci)(nil)).Elem()
}

func (o QemuVMHostpciOutput) ToQemuVMHostpciOutput() QemuVMHostpciOutput {
	return o
}

func (o QemuVMHostpciOutput) ToQemuVMHostpciOutputWithContext(ctx context.Context) QemuVMHostpciOutput {
	return o
}

func (o QemuVMHostpciOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMHostpci) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o QemuVMHostpciOutput) Pcie() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMHostpci) *int { return v.Pcie }).(pulumi.IntPtrOutput)
}

func (o QemuVMHostpciOutput) Rombar() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMHostpci) *int { return v.Rombar }).(pulumi.IntPtrOutput)
}

type QemuVMHostpciArrayOutput struct{ *pulumi.OutputState }

func (QemuVMHostpciArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMHostpci)(nil)).Elem()
}

func (o QemuVMHostpciArrayOutput) ToQemuVMHostpciArrayOutput() QemuVMHostpciArrayOutput {
	return o
}

func (o QemuVMHostpciArrayOutput) ToQemuVMHostpciArrayOutputWithContext(ctx context.Context) QemuVMHostpciArrayOutput {
	return o
}

func (o QemuVMHostpciArrayOutput) Index(i pulumi.IntInput) QemuVMHostpciOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMHostpci {
		return vs[0].([]QemuVMHostpci)[vs[1].(int)]
	}).(QemuVMHostpciOutput)
}

type QemuVMNetwork struct {
	Bridge   *string `pulumi:"bridge"`
	Firewall *bool   `pulumi:"firewall"`
	LinkDown *bool   `pulumi:"linkDown"`
	Macaddr  *string `pulumi:"macaddr"`
	Model    string  `pulumi:"model"`
	Mtu      *int    `pulumi:"mtu"`
	Queues   *int    `pulumi:"queues"`
	Rate     *int    `pulumi:"rate"`
	Tag      *int    `pulumi:"tag"`
}

// QemuVMNetworkInput is an input type that accepts QemuVMNetworkArgs and QemuVMNetworkOutput values.
// You can construct a concrete instance of `QemuVMNetworkInput` via:
//
//	QemuVMNetworkArgs{...}
type QemuVMNetworkInput interface {
	pulumi.Input

	ToQemuVMNetworkOutput() QemuVMNetworkOutput
	ToQemuVMNetworkOutputWithContext(context.Context) QemuVMNetworkOutput
}

type QemuVMNetworkArgs struct {
	Bridge   pulumi.StringPtrInput `pulumi:"bridge"`
	Firewall pulumi.BoolPtrInput   `pulumi:"firewall"`
	LinkDown pulumi.BoolPtrInput   `pulumi:"linkDown"`
	Macaddr  pulumi.StringPtrInput `pulumi:"macaddr"`
	Model    pulumi.StringInput    `pulumi:"model"`
	Mtu      pulumi.IntPtrInput    `pulumi:"mtu"`
	Queues   pulumi.IntPtrInput    `pulumi:"queues"`
	Rate     pulumi.IntPtrInput    `pulumi:"rate"`
	Tag      pulumi.IntPtrInput    `pulumi:"tag"`
}

func (QemuVMNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMNetwork)(nil)).Elem()
}

func (i QemuVMNetworkArgs) ToQemuVMNetworkOutput() QemuVMNetworkOutput {
	return i.ToQemuVMNetworkOutputWithContext(context.Background())
}

func (i QemuVMNetworkArgs) ToQemuVMNetworkOutputWithContext(ctx context.Context) QemuVMNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMNetworkOutput)
}

// QemuVMNetworkArrayInput is an input type that accepts QemuVMNetworkArray and QemuVMNetworkArrayOutput values.
// You can construct a concrete instance of `QemuVMNetworkArrayInput` via:
//
//	QemuVMNetworkArray{ QemuVMNetworkArgs{...} }
type QemuVMNetworkArrayInput interface {
	pulumi.Input

	ToQemuVMNetworkArrayOutput() QemuVMNetworkArrayOutput
	ToQemuVMNetworkArrayOutputWithContext(context.Context) QemuVMNetworkArrayOutput
}

type QemuVMNetworkArray []QemuVMNetworkInput

func (QemuVMNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMNetwork)(nil)).Elem()
}

func (i QemuVMNetworkArray) ToQemuVMNetworkArrayOutput() QemuVMNetworkArrayOutput {
	return i.ToQemuVMNetworkArrayOutputWithContext(context.Background())
}

func (i QemuVMNetworkArray) ToQemuVMNetworkArrayOutputWithContext(ctx context.Context) QemuVMNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMNetworkArrayOutput)
}

type QemuVMNetworkOutput struct{ *pulumi.OutputState }

func (QemuVMNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMNetwork)(nil)).Elem()
}

func (o QemuVMNetworkOutput) ToQemuVMNetworkOutput() QemuVMNetworkOutput {
	return o
}

func (o QemuVMNetworkOutput) ToQemuVMNetworkOutputWithContext(ctx context.Context) QemuVMNetworkOutput {
	return o
}

func (o QemuVMNetworkOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *string { return v.Bridge }).(pulumi.StringPtrOutput)
}

func (o QemuVMNetworkOutput) Firewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *bool { return v.Firewall }).(pulumi.BoolPtrOutput)
}

func (o QemuVMNetworkOutput) LinkDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *bool { return v.LinkDown }).(pulumi.BoolPtrOutput)
}

func (o QemuVMNetworkOutput) Macaddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *string { return v.Macaddr }).(pulumi.StringPtrOutput)
}

func (o QemuVMNetworkOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMNetwork) string { return v.Model }).(pulumi.StringOutput)
}

func (o QemuVMNetworkOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

func (o QemuVMNetworkOutput) Queues() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *int { return v.Queues }).(pulumi.IntPtrOutput)
}

func (o QemuVMNetworkOutput) Rate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *int { return v.Rate }).(pulumi.IntPtrOutput)
}

func (o QemuVMNetworkOutput) Tag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *int { return v.Tag }).(pulumi.IntPtrOutput)
}

type QemuVMNetworkArrayOutput struct{ *pulumi.OutputState }

func (QemuVMNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMNetwork)(nil)).Elem()
}

func (o QemuVMNetworkArrayOutput) ToQemuVMNetworkArrayOutput() QemuVMNetworkArrayOutput {
	return o
}

func (o QemuVMNetworkArrayOutput) ToQemuVMNetworkArrayOutputWithContext(ctx context.Context) QemuVMNetworkArrayOutput {
	return o
}

func (o QemuVMNetworkArrayOutput) Index(i pulumi.IntInput) QemuVMNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMNetwork {
		return vs[0].([]QemuVMNetwork)[vs[1].(int)]
	}).(QemuVMNetworkOutput)
}

type QemuVMSerial struct {
	Id   int    `pulumi:"id"`
	Type string `pulumi:"type"`
}

// QemuVMSerialInput is an input type that accepts QemuVMSerialArgs and QemuVMSerialOutput values.
// You can construct a concrete instance of `QemuVMSerialInput` via:
//
//	QemuVMSerialArgs{...}
type QemuVMSerialInput interface {
	pulumi.Input

	ToQemuVMSerialOutput() QemuVMSerialOutput
	ToQemuVMSerialOutputWithContext(context.Context) QemuVMSerialOutput
}

type QemuVMSerialArgs struct {
	Id   pulumi.IntInput    `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (QemuVMSerialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMSerial)(nil)).Elem()
}

func (i QemuVMSerialArgs) ToQemuVMSerialOutput() QemuVMSerialOutput {
	return i.ToQemuVMSerialOutputWithContext(context.Background())
}

func (i QemuVMSerialArgs) ToQemuVMSerialOutputWithContext(ctx context.Context) QemuVMSerialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMSerialOutput)
}

// QemuVMSerialArrayInput is an input type that accepts QemuVMSerialArray and QemuVMSerialArrayOutput values.
// You can construct a concrete instance of `QemuVMSerialArrayInput` via:
//
//	QemuVMSerialArray{ QemuVMSerialArgs{...} }
type QemuVMSerialArrayInput interface {
	pulumi.Input

	ToQemuVMSerialArrayOutput() QemuVMSerialArrayOutput
	ToQemuVMSerialArrayOutputWithContext(context.Context) QemuVMSerialArrayOutput
}

type QemuVMSerialArray []QemuVMSerialInput

func (QemuVMSerialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMSerial)(nil)).Elem()
}

func (i QemuVMSerialArray) ToQemuVMSerialArrayOutput() QemuVMSerialArrayOutput {
	return i.ToQemuVMSerialArrayOutputWithContext(context.Background())
}

func (i QemuVMSerialArray) ToQemuVMSerialArrayOutputWithContext(ctx context.Context) QemuVMSerialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMSerialArrayOutput)
}

type QemuVMSerialOutput struct{ *pulumi.OutputState }

func (QemuVMSerialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMSerial)(nil)).Elem()
}

func (o QemuVMSerialOutput) ToQemuVMSerialOutput() QemuVMSerialOutput {
	return o
}

func (o QemuVMSerialOutput) ToQemuVMSerialOutputWithContext(ctx context.Context) QemuVMSerialOutput {
	return o
}

func (o QemuVMSerialOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v QemuVMSerial) int { return v.Id }).(pulumi.IntOutput)
}

func (o QemuVMSerialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMSerial) string { return v.Type }).(pulumi.StringOutput)
}

type QemuVMSerialArrayOutput struct{ *pulumi.OutputState }

func (QemuVMSerialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMSerial)(nil)).Elem()
}

func (o QemuVMSerialArrayOutput) ToQemuVMSerialArrayOutput() QemuVMSerialArrayOutput {
	return o
}

func (o QemuVMSerialArrayOutput) ToQemuVMSerialArrayOutputWithContext(ctx context.Context) QemuVMSerialArrayOutput {
	return o
}

func (o QemuVMSerialArrayOutput) Index(i pulumi.IntInput) QemuVMSerialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMSerial {
		return vs[0].([]QemuVMSerial)[vs[1].(int)]
	}).(QemuVMSerialOutput)
}

type QemuVMUnusedDisk struct {
	File    *string `pulumi:"file"`
	Slot    *int    `pulumi:"slot"`
	Storage *string `pulumi:"storage"`
}

// QemuVMUnusedDiskInput is an input type that accepts QemuVMUnusedDiskArgs and QemuVMUnusedDiskOutput values.
// You can construct a concrete instance of `QemuVMUnusedDiskInput` via:
//
//	QemuVMUnusedDiskArgs{...}
type QemuVMUnusedDiskInput interface {
	pulumi.Input

	ToQemuVMUnusedDiskOutput() QemuVMUnusedDiskOutput
	ToQemuVMUnusedDiskOutputWithContext(context.Context) QemuVMUnusedDiskOutput
}

type QemuVMUnusedDiskArgs struct {
	File    pulumi.StringPtrInput `pulumi:"file"`
	Slot    pulumi.IntPtrInput    `pulumi:"slot"`
	Storage pulumi.StringPtrInput `pulumi:"storage"`
}

func (QemuVMUnusedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMUnusedDisk)(nil)).Elem()
}

func (i QemuVMUnusedDiskArgs) ToQemuVMUnusedDiskOutput() QemuVMUnusedDiskOutput {
	return i.ToQemuVMUnusedDiskOutputWithContext(context.Background())
}

func (i QemuVMUnusedDiskArgs) ToQemuVMUnusedDiskOutputWithContext(ctx context.Context) QemuVMUnusedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMUnusedDiskOutput)
}

// QemuVMUnusedDiskArrayInput is an input type that accepts QemuVMUnusedDiskArray and QemuVMUnusedDiskArrayOutput values.
// You can construct a concrete instance of `QemuVMUnusedDiskArrayInput` via:
//
//	QemuVMUnusedDiskArray{ QemuVMUnusedDiskArgs{...} }
type QemuVMUnusedDiskArrayInput interface {
	pulumi.Input

	ToQemuVMUnusedDiskArrayOutput() QemuVMUnusedDiskArrayOutput
	ToQemuVMUnusedDiskArrayOutputWithContext(context.Context) QemuVMUnusedDiskArrayOutput
}

type QemuVMUnusedDiskArray []QemuVMUnusedDiskInput

func (QemuVMUnusedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMUnusedDisk)(nil)).Elem()
}

func (i QemuVMUnusedDiskArray) ToQemuVMUnusedDiskArrayOutput() QemuVMUnusedDiskArrayOutput {
	return i.ToQemuVMUnusedDiskArrayOutputWithContext(context.Background())
}

func (i QemuVMUnusedDiskArray) ToQemuVMUnusedDiskArrayOutputWithContext(ctx context.Context) QemuVMUnusedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMUnusedDiskArrayOutput)
}

type QemuVMUnusedDiskOutput struct{ *pulumi.OutputState }

func (QemuVMUnusedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMUnusedDisk)(nil)).Elem()
}

func (o QemuVMUnusedDiskOutput) ToQemuVMUnusedDiskOutput() QemuVMUnusedDiskOutput {
	return o
}

func (o QemuVMUnusedDiskOutput) ToQemuVMUnusedDiskOutputWithContext(ctx context.Context) QemuVMUnusedDiskOutput {
	return o
}

func (o QemuVMUnusedDiskOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMUnusedDisk) *string { return v.File }).(pulumi.StringPtrOutput)
}

func (o QemuVMUnusedDiskOutput) Slot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMUnusedDisk) *int { return v.Slot }).(pulumi.IntPtrOutput)
}

func (o QemuVMUnusedDiskOutput) Storage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMUnusedDisk) *string { return v.Storage }).(pulumi.StringPtrOutput)
}

type QemuVMUnusedDiskArrayOutput struct{ *pulumi.OutputState }

func (QemuVMUnusedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMUnusedDisk)(nil)).Elem()
}

func (o QemuVMUnusedDiskArrayOutput) ToQemuVMUnusedDiskArrayOutput() QemuVMUnusedDiskArrayOutput {
	return o
}

func (o QemuVMUnusedDiskArrayOutput) ToQemuVMUnusedDiskArrayOutputWithContext(ctx context.Context) QemuVMUnusedDiskArrayOutput {
	return o
}

func (o QemuVMUnusedDiskArrayOutput) Index(i pulumi.IntInput) QemuVMUnusedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMUnusedDisk {
		return vs[0].([]QemuVMUnusedDisk)[vs[1].(int)]
	}).(QemuVMUnusedDiskOutput)
}

type QemuVMUsb struct {
	Host string `pulumi:"host"`
	Usb3 *bool  `pulumi:"usb3"`
}

// QemuVMUsbInput is an input type that accepts QemuVMUsbArgs and QemuVMUsbOutput values.
// You can construct a concrete instance of `QemuVMUsbInput` via:
//
//	QemuVMUsbArgs{...}
type QemuVMUsbInput interface {
	pulumi.Input

	ToQemuVMUsbOutput() QemuVMUsbOutput
	ToQemuVMUsbOutputWithContext(context.Context) QemuVMUsbOutput
}

type QemuVMUsbArgs struct {
	Host pulumi.StringInput  `pulumi:"host"`
	Usb3 pulumi.BoolPtrInput `pulumi:"usb3"`
}

func (QemuVMUsbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMUsb)(nil)).Elem()
}

func (i QemuVMUsbArgs) ToQemuVMUsbOutput() QemuVMUsbOutput {
	return i.ToQemuVMUsbOutputWithContext(context.Background())
}

func (i QemuVMUsbArgs) ToQemuVMUsbOutputWithContext(ctx context.Context) QemuVMUsbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMUsbOutput)
}

// QemuVMUsbArrayInput is an input type that accepts QemuVMUsbArray and QemuVMUsbArrayOutput values.
// You can construct a concrete instance of `QemuVMUsbArrayInput` via:
//
//	QemuVMUsbArray{ QemuVMUsbArgs{...} }
type QemuVMUsbArrayInput interface {
	pulumi.Input

	ToQemuVMUsbArrayOutput() QemuVMUsbArrayOutput
	ToQemuVMUsbArrayOutputWithContext(context.Context) QemuVMUsbArrayOutput
}

type QemuVMUsbArray []QemuVMUsbInput

func (QemuVMUsbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMUsb)(nil)).Elem()
}

func (i QemuVMUsbArray) ToQemuVMUsbArrayOutput() QemuVMUsbArrayOutput {
	return i.ToQemuVMUsbArrayOutputWithContext(context.Background())
}

func (i QemuVMUsbArray) ToQemuVMUsbArrayOutputWithContext(ctx context.Context) QemuVMUsbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMUsbArrayOutput)
}

type QemuVMUsbOutput struct{ *pulumi.OutputState }

func (QemuVMUsbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMUsb)(nil)).Elem()
}

func (o QemuVMUsbOutput) ToQemuVMUsbOutput() QemuVMUsbOutput {
	return o
}

func (o QemuVMUsbOutput) ToQemuVMUsbOutputWithContext(ctx context.Context) QemuVMUsbOutput {
	return o
}

func (o QemuVMUsbOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMUsb) string { return v.Host }).(pulumi.StringOutput)
}

func (o QemuVMUsbOutput) Usb3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMUsb) *bool { return v.Usb3 }).(pulumi.BoolPtrOutput)
}

type QemuVMUsbArrayOutput struct{ *pulumi.OutputState }

func (QemuVMUsbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMUsb)(nil)).Elem()
}

func (o QemuVMUsbArrayOutput) ToQemuVMUsbArrayOutput() QemuVMUsbArrayOutput {
	return o
}

func (o QemuVMUsbArrayOutput) ToQemuVMUsbArrayOutputWithContext(ctx context.Context) QemuVMUsbArrayOutput {
	return o
}

func (o QemuVMUsbArrayOutput) Index(i pulumi.IntInput) QemuVMUsbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMUsb {
		return vs[0].([]QemuVMUsb)[vs[1].(int)]
	}).(QemuVMUsbOutput)
}

type QemuVMVga struct {
	Memory *int    `pulumi:"memory"`
	Type   *string `pulumi:"type"`
}

// QemuVMVgaInput is an input type that accepts QemuVMVgaArgs and QemuVMVgaOutput values.
// You can construct a concrete instance of `QemuVMVgaInput` via:
//
//	QemuVMVgaArgs{...}
type QemuVMVgaInput interface {
	pulumi.Input

	ToQemuVMVgaOutput() QemuVMVgaOutput
	ToQemuVMVgaOutputWithContext(context.Context) QemuVMVgaOutput
}

type QemuVMVgaArgs struct {
	Memory pulumi.IntPtrInput    `pulumi:"memory"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (QemuVMVgaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMVga)(nil)).Elem()
}

func (i QemuVMVgaArgs) ToQemuVMVgaOutput() QemuVMVgaOutput {
	return i.ToQemuVMVgaOutputWithContext(context.Background())
}

func (i QemuVMVgaArgs) ToQemuVMVgaOutputWithContext(ctx context.Context) QemuVMVgaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMVgaOutput)
}

// QemuVMVgaArrayInput is an input type that accepts QemuVMVgaArray and QemuVMVgaArrayOutput values.
// You can construct a concrete instance of `QemuVMVgaArrayInput` via:
//
//	QemuVMVgaArray{ QemuVMVgaArgs{...} }
type QemuVMVgaArrayInput interface {
	pulumi.Input

	ToQemuVMVgaArrayOutput() QemuVMVgaArrayOutput
	ToQemuVMVgaArrayOutputWithContext(context.Context) QemuVMVgaArrayOutput
}

type QemuVMVgaArray []QemuVMVgaInput

func (QemuVMVgaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMVga)(nil)).Elem()
}

func (i QemuVMVgaArray) ToQemuVMVgaArrayOutput() QemuVMVgaArrayOutput {
	return i.ToQemuVMVgaArrayOutputWithContext(context.Background())
}

func (i QemuVMVgaArray) ToQemuVMVgaArrayOutputWithContext(ctx context.Context) QemuVMVgaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMVgaArrayOutput)
}

type QemuVMVgaOutput struct{ *pulumi.OutputState }

func (QemuVMVgaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMVga)(nil)).Elem()
}

func (o QemuVMVgaOutput) ToQemuVMVgaOutput() QemuVMVgaOutput {
	return o
}

func (o QemuVMVgaOutput) ToQemuVMVgaOutputWithContext(ctx context.Context) QemuVMVgaOutput {
	return o
}

func (o QemuVMVgaOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMVga) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o QemuVMVgaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMVga) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type QemuVMVgaArrayOutput struct{ *pulumi.OutputState }

func (QemuVMVgaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMVga)(nil)).Elem()
}

func (o QemuVMVgaArrayOutput) ToQemuVMVgaArrayOutput() QemuVMVgaArrayOutput {
	return o
}

func (o QemuVMVgaArrayOutput) ToQemuVMVgaArrayOutputWithContext(ctx context.Context) QemuVMVgaArrayOutput {
	return o
}

func (o QemuVMVgaArrayOutput) Index(i pulumi.IntInput) QemuVMVgaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMVga {
		return vs[0].([]QemuVMVga)[vs[1].(int)]
	}).(QemuVMVgaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMDiskInput)(nil)).Elem(), QemuVMDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMDiskArrayInput)(nil)).Elem(), QemuVMDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMHostpciInput)(nil)).Elem(), QemuVMHostpciArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMHostpciArrayInput)(nil)).Elem(), QemuVMHostpciArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMNetworkInput)(nil)).Elem(), QemuVMNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMNetworkArrayInput)(nil)).Elem(), QemuVMNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMSerialInput)(nil)).Elem(), QemuVMSerialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMSerialArrayInput)(nil)).Elem(), QemuVMSerialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMUnusedDiskInput)(nil)).Elem(), QemuVMUnusedDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMUnusedDiskArrayInput)(nil)).Elem(), QemuVMUnusedDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMUsbInput)(nil)).Elem(), QemuVMUsbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMUsbArrayInput)(nil)).Elem(), QemuVMUsbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMVgaInput)(nil)).Elem(), QemuVMVgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QemuVMVgaArrayInput)(nil)).Elem(), QemuVMVgaArray{})
	pulumi.RegisterOutputType(QemuVMDiskOutput{})
	pulumi.RegisterOutputType(QemuVMDiskArrayOutput{})
	pulumi.RegisterOutputType(QemuVMHostpciOutput{})
	pulumi.RegisterOutputType(QemuVMHostpciArrayOutput{})
	pulumi.RegisterOutputType(QemuVMNetworkOutput{})
	pulumi.RegisterOutputType(QemuVMNetworkArrayOutput{})
	pulumi.RegisterOutputType(QemuVMSerialOutput{})
	pulumi.RegisterOutputType(QemuVMSerialArrayOutput{})
	pulumi.RegisterOutputType(QemuVMUnusedDiskOutput{})
	pulumi.RegisterOutputType(QemuVMUnusedDiskArrayOutput{})
	pulumi.RegisterOutputType(QemuVMUsbOutput{})
	pulumi.RegisterOutputType(QemuVMUsbArrayOutput{})
	pulumi.RegisterOutputType(QemuVMVgaOutput{})
	pulumi.RegisterOutputType(QemuVMVgaArrayOutput{})
}
