// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the proxmoxve package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// API TokenID e.g. root@pam!mytesttoken
	PmApiTokenId pulumi.StringPtrOutput `pulumi:"pmApiTokenId"`
	// The secret uuid corresponding to a TokenID
	PmApiTokenSecret pulumi.StringPtrOutput `pulumi:"pmApiTokenSecret"`
	// https://host.fqdn:8006/api2/json
	PmApiUrl pulumi.StringPtrOutput `pulumi:"pmApiUrl"`
	// Set custom http headers e.g. Key,Value,Key1,Value1
	PmHttpHeaders pulumi.StringPtrOutput `pulumi:"pmHttpHeaders"`
	// Write logs to this specific file
	PmLogFile pulumi.StringPtrOutput `pulumi:"pmLogFile"`
	// OTP 2FA code (if required)
	PmOtp pulumi.StringPtrOutput `pulumi:"pmOtp"`
	// Password to authenticate into proxmox
	PmPassword pulumi.StringPtrOutput `pulumi:"pmPassword"`
	// Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port
	PmProxyServer pulumi.StringPtrOutput `pulumi:"pmProxyServer"`
	// Username e.g. myuser or myuser@pam
	PmUser pulumi.StringPtrOutput `pulumi:"pmUser"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:proxmoxve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// API TokenID e.g. root@pam!mytesttoken
	PmApiTokenId *string `pulumi:"pmApiTokenId"`
	// The secret uuid corresponding to a TokenID
	PmApiTokenSecret *string `pulumi:"pmApiTokenSecret"`
	// https://host.fqdn:8006/api2/json
	PmApiUrl *string `pulumi:"pmApiUrl"`
	// By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of
	// VMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set
	// this to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of
	// the danger in doing so.
	PmDangerouslyIgnoreUnknownAttributes *bool `pulumi:"pmDangerouslyIgnoreUnknownAttributes"`
	// Enable or disable the verbose debug output from proxmox api
	PmDebug *bool `pulumi:"pmDebug"`
	// Set custom http headers e.g. Key,Value,Key1,Value1
	PmHttpHeaders *string `pulumi:"pmHttpHeaders"`
	// Enable provider logging to get proxmox API logs
	PmLogEnable *bool `pulumi:"pmLogEnable"`
	// Write logs to this specific file
	PmLogFile *string `pulumi:"pmLogFile"`
	// Configure the logging level to display; trace, debug, info, warn, etc
	PmLogLevels map[string]interface{} `pulumi:"pmLogLevels"`
	// OTP 2FA code (if required)
	PmOtp      *string `pulumi:"pmOtp"`
	PmParallel *int    `pulumi:"pmParallel"`
	// Password to authenticate into proxmox
	PmPassword *string `pulumi:"pmPassword"`
	// Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port
	PmProxyServer *string `pulumi:"pmProxyServer"`
	// How many seconds to wait for operations for both provider and api-client, default is 20m
	PmTimeout *int `pulumi:"pmTimeout"`
	// By default, every TLS connection is verified to be secure. This option allows terraform to proceed and operate on
	// servers considered insecure. For example if you're connecting to a remote host and you do not have the CA cert that
	// issued the proxmox api url's certificate.
	PmTlsInsecure *bool `pulumi:"pmTlsInsecure"`
	// Username e.g. myuser or myuser@pam
	PmUser *string `pulumi:"pmUser"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// API TokenID e.g. root@pam!mytesttoken
	PmApiTokenId pulumi.StringPtrInput
	// The secret uuid corresponding to a TokenID
	PmApiTokenSecret pulumi.StringPtrInput
	// https://host.fqdn:8006/api2/json
	PmApiUrl pulumi.StringPtrInput
	// By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of
	// VMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set
	// this to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of
	// the danger in doing so.
	PmDangerouslyIgnoreUnknownAttributes pulumi.BoolPtrInput
	// Enable or disable the verbose debug output from proxmox api
	PmDebug pulumi.BoolPtrInput
	// Set custom http headers e.g. Key,Value,Key1,Value1
	PmHttpHeaders pulumi.StringPtrInput
	// Enable provider logging to get proxmox API logs
	PmLogEnable pulumi.BoolPtrInput
	// Write logs to this specific file
	PmLogFile pulumi.StringPtrInput
	// Configure the logging level to display; trace, debug, info, warn, etc
	PmLogLevels pulumi.MapInput
	// OTP 2FA code (if required)
	PmOtp      pulumi.StringPtrInput
	PmParallel pulumi.IntPtrInput
	// Password to authenticate into proxmox
	PmPassword pulumi.StringPtrInput
	// Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port
	PmProxyServer pulumi.StringPtrInput
	// How many seconds to wait for operations for both provider and api-client, default is 20m
	PmTimeout pulumi.IntPtrInput
	// By default, every TLS connection is verified to be secure. This option allows terraform to proceed and operate on
	// servers considered insecure. For example if you're connecting to a remote host and you do not have the CA cert that
	// issued the proxmox api url's certificate.
	PmTlsInsecure pulumi.BoolPtrInput
	// Username e.g. myuser or myuser@pam
	PmUser pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// API TokenID e.g. root@pam!mytesttoken
func (o ProviderOutput) PmApiTokenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmApiTokenId }).(pulumi.StringPtrOutput)
}

// The secret uuid corresponding to a TokenID
func (o ProviderOutput) PmApiTokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmApiTokenSecret }).(pulumi.StringPtrOutput)
}

// https://host.fqdn:8006/api2/json
func (o ProviderOutput) PmApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmApiUrl }).(pulumi.StringPtrOutput)
}

// Set custom http headers e.g. Key,Value,Key1,Value1
func (o ProviderOutput) PmHttpHeaders() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmHttpHeaders }).(pulumi.StringPtrOutput)
}

// Write logs to this specific file
func (o ProviderOutput) PmLogFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmLogFile }).(pulumi.StringPtrOutput)
}

// OTP 2FA code (if required)
func (o ProviderOutput) PmOtp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmOtp }).(pulumi.StringPtrOutput)
}

// Password to authenticate into proxmox
func (o ProviderOutput) PmPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmPassword }).(pulumi.StringPtrOutput)
}

// Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port
func (o ProviderOutput) PmProxyServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmProxyServer }).(pulumi.StringPtrOutput)
}

// Username e.g. myuser or myuser@pam
func (o ProviderOutput) PmUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PmUser }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
